name: Build & Release

on:
  push:
    branches:
      - main
      - electron

jobs:
  build:
    name: Build (${{ matrix.os }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: macOS-latest
          arch: arm64
        # - os: macOS-latest
        #   arch: x64
        # - os: windows-latest
        #   arch: x64
        # - os: linux-latest
        #   arch: x64

    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3.5.1
        with:
          node-version: 18.x
          cache: npm
          cache-dependency-path: desktop/package-lock.json
      - name: Read package.json version
        id: package-json
        uses: Saionaro/extract-package-version@v1.1.1
        with:
          path: desktop
      - name: Setup Deno
        # uses: denoland/setup-deno@v1
        uses: denoland/setup-deno@d4873ceeec10de6275fecd1f94b6985369d40231
        with:
          deno-version: v1.29.1
      - name: Build Silver Bullet
        run: deno task build
      - name: Create Silver Bullet bundle
        run: deno task bundle
      - name: Set MacOS signing certs
        if: matrix.os == 'macOS-latest'
        run: chmod +x scripts/add-macos-cert.sh && ./scripts/add-macos-cert.sh
        env:
          MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
          MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
      # - name: Set Windows signing certificate
      #   if: matrix.os == 'windows-latest'
      #   continue-on-error: true
      #   id: write_file
      #   uses: timheuer/base64-to-file@v1
      #   with:
      #     fileName: 'win-certificate.pfx'
      #     encodedString: ${{ secrets.WINDOWS_CODESIGN_P12 }}
      - name: Install
        run: npm install
        working-directory: desktop
      - name: Make
        # if: startsWith(github.ref, 'refs/tags/')
        run: npm run make -- --arch=${{ matrix.arch }}
        working-directory: desktop
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #WINDOWS_CODESIGN_FILE: ${{ steps.write_file.outputs.filePath }}
          #WINDOWS_CODESIGN_PASSWORD: ${{ secrets.WINDOWS_CODESIGN_PASSWORD }}
      - name: Make
        # if: startsWith(github.ref, 'refs/tags/')
        run: npm run make -- --arch=${{ matrix.arch }}
        working-directory: desktop
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #WINDOWS_CODESIGN_FILE: ${{ steps.write_file.outputs.filePath }}
          #WINDOWS_CODESIGN_PASSWORD: ${{ secrets.WINDOWS_CODESIGN_PASSWORD }}
      - name: Release Mac
        uses: johnwbyrd/update-release@v1.0.0
        if: matrix.os == 'macOS-latest'
        # if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          files: desktop/out/make/zip/darwin/${{ matrix.arch }}/silverbullet-darwin-${{ matrix.arch }}-${{ steps.package-json.outputs.version }}.zip

      - name: Release Windows
        uses: johnwbyrd/update-release@v1.0.0
        if: matrix.os == 'windows-latest'
        # if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          files: |
            desktop/out/make/squirrel.windows/x64/silverbullet-${{ steps.package-json.outputs.version }}-full.nupkg
            desktop/out/make/squirrel.windows/x64/silverbullet-${{ steps.package-json.outputs.version }}\ Setup.exe

      - name: Release Linux
        uses: johnwbyrd/update-release@v1.0.0
        if: matrix.os == 'linux-latest'
        # if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          files: |
            desktop/out/make/rpm/x64/silverbullet-${{ steps.package-json.outputs.version }}-1.x86_64.rpm
            desktop/out/make/deb/x64/silverbullet_${{ steps.package-json.outputs.version }}_amd64.deb
            desktop/out/make/zip/linux/x64/silverbullet-linux-x64-${{ steps.package-json.outputs.version }}.zip
