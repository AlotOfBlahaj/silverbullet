import { app, BrowserWindow, dialog, Menu, shell } from "electron";
import {
  findInstanceByUrl,
  folderPicker,
  openFolder,
  openWindow,
  runningServers,
} from "./instance";
import { menu } from "./menu";
import { store } from "./store";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

async function boot() {
  const openFolders: string[] = store.get("openFolders");
  if (openFolders.length === 0) {
    await folderPicker();
  } else {
    for (const folder of openFolders) {
      await openFolder(folder);
    }
  }
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  Menu.setApplicationMenu(menu);
  console.log("App data path", app.getPath("userData"));
  boot().catch(console.error);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("browser-window-created", (e, window) => {
  // window.setParentWindow(null);
  window.webContents.once("did-finish-load", () => {
    console.log("Browser window created");
    const url = new URL(window.webContents.getURL());
    const instance = findInstanceByUrl(url);
    if (!instance) {
      console.log("Not a SB window");
      return;
    }
    instance.refcount++;

    window.webContents.setWindowOpenHandler(({ url }) => {
      const instance = findInstanceByUrl(new URL(url));
      if (instance) {
        openWindow(instance);
      } else {
        shell.openExternal(url);
      }
      return { action: "deny" };
    });

    window.once("close", () => {
      console.log("Closed window");
      instance.refcount--;
      console.log("Refcount", instance.refcount);
      if (instance.refcount === 0) {
        console.log("Stopping server");
        instance.proc.kill();
        runningServers.delete(instance.folder);
      }
    });
  });
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    boot();
  }
});
