import { spawn } from "node:child_process";
import { app, BrowserWindow, dialog } from "electron";
import portfinder from "portfinder";
import fetch from "node-fetch";
import Store from "electron-store";
import fs from "node:fs";
import { platform } from "node:os";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const store = new Store({
  defaults: {
    openFolders: [],
  },
});

// Should work for Liux and Mac
let denoPath = `${process.resourcesPath}/deno`;

// If not...
if (!fs.existsSync(denoPath)) {
  // Windows
  if (platform() === "win32") {
    if (fs.existsSync(`${process.resourcesPath}/deno.exe`)) {
      denoPath = `${process.resourcesPath}/deno.exe`;
    } else {
      denoPath = "deno.exe";
    }
  } else {
    // Everything else
    denoPath = "deno";
  }
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

async function boot() {
  const openFolders: string[] = store.get("openFolders");
  if (openFolders.length === 0) {
    await createInstance();
  } else {
    for (const folder of openFolders) {
      const port = await runSilverBullet(folder);
      openSilverBulletUI(port);
    }
  }
}

async function createInstance() {
  const dialogReturn = await dialog.showOpenDialog({
    title: "Pick a page folder",
    properties: ["openDirectory", "createDirectory"],
  });

  if (dialogReturn.filePaths.length === 1) {
    const port = await runSilverBullet(dialogReturn.filePaths[0]);
    openSilverBulletUI(port);
    let allOpenFolders: string[] = store.get("openFolders");
    allOpenFolders.push(dialogReturn.filePaths[0]);
    app.addRecentDocument(dialogReturn.filePaths[0]);
    store.set("openFolders", allOpenFolders);
  }
}

async function runSilverBullet(pagePath: string): Promise<number> {
  portfinder.setBasePort(3010);
  portfinder.setHighestPort(3999);
  const port = await portfinder.getPortPromise();

  const ls = spawn(denoPath, [
    "run",
    "-A",
    "--unstable",
    "https://get.silverbullet.md",
    "--port",
    "" + port,
    pagePath,
  ]);

  ls.stdout.on("data", (data) => {
    console.log(`SB stdout: ${data}`);
  });

  ls.stderr.on("data", (data) => {
    console.error(`SB stderr: ${data}`);
  });

  ls.on("close", (code) => {
    console.log(`child process exited with code ${code}`);
  });

  // Try for 20s to see if SB is live
  for (let i = 0; i < 20; i++) {
    console.log("Going to poll for SB to be live...");
    try {
      const result = await fetch(`http://localhost:${port}`);
      if (result.ok) {
        console.log("Live!");
        return port;
      }
      console.log("Still booting...");
    } catch {
      console.log("Still booting...");
    }
    await new Promise((resolve) => setTimeout(resolve, 1000));
  }
}

function openSilverBulletUI(port: number) {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  console.log("Opening SB at http://localhost:" + port);

  // and load the index.html of the app.
  mainWindow.loadURL(`http://localhost:${port}`);

  // Open the DevTools.
  mainWindow.webContents.openDevTools({ mode: "bottom" });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  // const port = await runSilverBullet("/Users/zef/Notes");
  // openSilverBulletUI(port);
  console.log("App data path", app.getPath("userData"));
  boot().catch(console.error);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    boot();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
